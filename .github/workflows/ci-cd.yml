name: CI/CD Pipeline

on:
  push:
    branches: [ test ]
  pull_request:
    branches: [ test ]

jobs:
  # Job 1: Code Quality Checks
  quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint

    - name: Check TypeScript types
      run: |
        cd frontend
        npx tsc --noEmit

  # Job 2: Build Application
  build:
    runs-on: ubuntu-latest
    needs: quality
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/.next/
        retention-days: 7

  # Job 3: End-to-End Tests
  e2e-tests:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: examind_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install root dependencies
      run: npm ci

    - name: Install backend dependencies
      run: |
        cd backend
        npm ci

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Setup database
      run: |
        cd backend/config
        psql -h localhost -U postgres -d examind_test -f examindDB-schema.sql
      env:
        PGPASSWORD: postgres

    - name: Create backend environment file
      run: |
        cd backend
        cat > .env << EOF
        DB_USER=postgres
        DB_HOST=localhost
        DB_DATABASE=examind_test
        DB_PASSWORD=postgres
        DB_PORT=5432
        JWT_SECRET=test_jwt_secret_key_for_ci_cd_pipeline
        NODE_ENV=test
        EOF

    - name: Create frontend environment file
      run: |
        cd frontend
        cat > .env.local << EOF
        NEXT_PUBLIC_API_URL=http://localhost:3000/api
        EOF

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Start backend server
      run: |
        cd backend
        npm start &
        sleep 10

    - name: Start frontend server
      run: |
        cd frontend
        npm start &
        sleep 10

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: Run Playwright tests
      run: npx playwright test
      env:
        BASE_URL: http://localhost:3000

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: test-results
        path: test-results/
        retention-days: 30

    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

    - name: Generate test summary
      if: ${{ always() }}
      run: |
        echo "## üß™ Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Test Results**: [Download](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)" >> $GITHUB_STEP_SUMMARY
        echo "- **Playwright Report**: [View Report](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Coverage:" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ User Authentication & Registration" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Dashboard & User Profile" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Quiz Management & Taking" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Resource Management" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Discussion Forums" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Gamification & Badges" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Teacher Dashboard" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Admin Dashboard" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Subject Management" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Edge Cases & Error Handling" >> $GITHUB_STEP_SUMMARY

    - name: Notify on failure
      if: ${{ failure() }}
      run: |
        echo "‚ùå Tests failed on branch ${{ github.ref_name }}"
        echo "Check the test results: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

    # Optional: Add Slack notification here if you have Slack webhook
    # - name: Slack Notification
    #   if: ${{ always() }}
    #   uses: rtCamp/action-slack-notify@v2
    #   env:
    #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    #     SLACK_MESSAGE: "Test Results: ${{ job.status }} - ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  # Job 4: Security Scan (Optional)
  security:
    runs-on: ubuntu-latest
    needs: quality
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run npm audit
      run: |
        cd frontend
        npm audit --audit-level moderate

    - name: Install backend dependencies
      run: |
        cd backend
        npm ci

    - name: Run backend npm audit
      run: |
        cd backend
        npm audit --audit-level moderate